buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        gritVersion = '3.0.0'
        gitVersionVersion = '0.11.0'
        coverallsVersion = '2.8.2'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.ajoberstar.grgit:grgit-gradle:${gritVersion}")
        classpath("gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:${gitVersionVersion}")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.ajoberstar.grgit"
apply plugin: "com.palantir.git-version"
apply plugin: "com.github.kt3k.coveralls"
apply from: "versioning.gradle"


ext {
    gitTagVersion = gitVersion();
    gitTagVersionDetails = versionDetails();

    //versions
    postgresVersion = "42.2.5"
    liquibaseVersion = '3.6.1'

    jaxbApiVersion = '2.3.0'
    apacheCommonsLangVersion = '3.7'
    guavaVersion = '25.1-jre'

    springDbUnitVersion = '1.2.0'
    dbUnitVersion = '2.5.0'

}

group = 'org.vkulinski.tool'
version = project.hasProperty('forceVersion') ?
        "$forceVersion" : getNextVersion(gitTagVersionDetails, gitTagVersion, true)
sourceCompatibility = 1.10
buildDir = 'out';

println("version = " + version)
//println("GRGIT_USER=$System.env.GRGIT_USER")
//println("GRGIT_PASS=$System.env.GRGIT_PASS")

repositories {
    mavenCentral()
}

dependencies {
    //core
    compile("com.google.guava:guava:$guavaVersion")
    compile("org.apache.commons:commons-lang3:$apacheCommonsLangVersion")
    compile("javax.xml.bind:jaxb-api:$jaxbApiVersion")
    compile('org.springframework.boot:spring-boot-starter-mail')

    // web
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    // database
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    runtime("org.postgresql:postgresql:$postgresVersion")
    runtime("org.liquibase:liquibase-core:$liquibaseVersion")

    //dev
    compile('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("com.github.springtestdbunit:spring-test-dbunit:$springDbUnitVersion")
    testCompile("org.dbunit:dbunit:$dbUnitVersion")
    testCompile('com.h2database:h2')
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task tagRevision {
    description = 'Tags the current head with the project\'s version.'
    onlyIf {
        0 != gitTagVersionDetails.commitDistance
    }
    doLast {
        def tagName = project.version;

        grgit.tag.add(name: tagName, message: "${tagName} is released")
        grgit.push(refsOrSpecs: [tagName])

        println "Tag new Version:" + tagName
    }
}